Given a target integer T, a non-negative integer K and an integer array A sorted in ascending order, find the K closest numbers to T in A.

Assumptions

A is not null
K is guranteed to be >= 0 and K is guranteed to be <= A.length
Return

A size K integer array containing the K closest numbers(not indices) in A, sorted in ascending order by the difference between the number and T. 
Examples

A = {1, 2, 3}, T = 2, K = 3, return {2, 1, 3} or {2, 3, 1}
A = {1, 4, 6, 8}, T = 3, K = 3, return {4, 1, 6}

//思路是先Binary Search找到target，因为用的是left < right - 1，最后会有left和right两个指针；然后根据绝对差值的大小判断，依次移动left或者right；
一共移动k次，就得到了答案；
//时间复杂度 O(logn +k);
//空间复杂度 O(k);

public class Solution {
  public int[] kClosest(int[] array, int target, int k) {
    int left = 0;
    int right = array.length - 1;
    int[] res = new int[k];
    if (k == 0) {
      return new int[0];
    }
    while (left < right - 1) {
      int mid = left + (right - left)/2;
      if (array[mid] <= target) { //我犯的第一个错，只写了mid，而不是array[mid]，粗心
        left = mid;
      } else {
        right = mid;
      }
    }
    for (int i = 0; i < k; i++) {
      if (right > array.length - 1 || left >= 0 && (Math.abs(array[left] - target) <= (Math.abs(array[right] - target)))) { //第二个错，left的判断条件在Math之后，因为如果left指针出现了负数，math就会outofbound，必须先判断left大小
        res[i] = array[left--];

      } else {
        res[i] = array[right++];

      }

     }
      return res;
   }

}

