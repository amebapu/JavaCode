Given a integer dictionary A of unknown size, where the numbers in the dictionary are sorted in ascending order, determine if a given target integer T is in the dictionary. Return the index of T in A, return -1 if T is not in A.

Assumptions

dictionary A is not null
dictionary.get(i) will return null(Java)/INT_MIN(C++)/None(Python) if index i is out of bounds
Examples

A = {1, 2, 5, 9, ......}, T = 5, return 2
A = {1, 2, 5, 9, 12, ......}, T = 7, return -1

/*
*  interface Dictionary {
*    public Integer get(int index);
*  }
*/

// You do not need to implement the Dictionary interface.
// You can use it directly, the implementation is provided when testing your solution.
public class Solution {
  public int search(Dictionary dict, int target) {
    if (dict == null) {
      return -1;
    }
    //初始两个左右指针，并且用0，1来表示最小的边界，后面再慢慢扩大
    int left = 0;
    int right = 1;
    //永远记住先判断null，只要右边不是null，并且right小于target，就继续扩展搜索区间
    while (dict.get(right) != null && dict.get(right) < target) {
      left = right;  //左边界可以跟着右边界一起走，这样会省一点搜索范围
      right = 2 * right; //这里我选择的是传统的两边扩展速度，虽然上课证明了10更快
    }
    //这时候我们right已经大于了target，是时候收网了，下面就是经典的binary search，用的是<= 左右最后错位的情况
    while (left <= right) {
      int mid = left + (right - left)/2; //忘了写int
      if (dict.get(mid) == null || dict.get(mid) > target) { //这里我们需要假设如果mid是null的情况，很可能right走出了dict的边界
        right = mid - 1;
      } else if (dict.get(mid) < target) {
        left = mid + 1;
      } else {
        return mid;
      }
    }
    return -1;
  }
}

//时间复杂度是O(logn);
空间：O(1);
