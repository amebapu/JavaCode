Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.
             
/*这道题想要求证怎么证明一个树是不是BST，BST有两个特点，一个是左边永远小于root，右边一定大于root；另一个是，如果按照inorder的顺序打印的话，一定是升序；
这里我们就利用第一点就好；
所以，我们需要证明的是，这个点，root，左边的所有值小于自己，右边的所有值大于自己。那这里我们需要用到preorder的思路，让每个node都和一个最大值，最小值
判定，如果在区间内，那么就是bst，如果不在就不是；先判断自己，在判断自己的子树，这样就可以把取值的区间传下去；

时间：O(N);
空间：O(height); 也就是O(N);

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
       return isBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
        
    }
    private boolean isBST(TreeNode root, long min, long max) {
        if (root == null) {
            return true;
        }
        if (root.val <= min || root.val >= max) {
            return false;
        }
        return (isBST(root.left, min, root.val) && isBST(root.right, root.val, max));
    }
}
